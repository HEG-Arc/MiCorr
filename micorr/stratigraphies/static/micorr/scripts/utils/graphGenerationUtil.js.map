{"version":3,"sources":["../ES2015/utils/graphGenerationUtil.js"],"names":["Datauri","utils","GraphGenerationUtil","win","stratig","window","getDrawer","width","stratigraphyHeight","resultDraw","SVG","document","documentElement","attr","console","log","getStratas","length","i","str","getUid","nestedInterface","drawInterface","y","height","nestedStrata","drawStrata","box","viewbox","svgContent","svg","clear","strata","divID","draw","index","getIndex","interfaceHeight","borderColor","getCharacteristicsByFamily","getName","upperStrata","undefined","interfaceDiv","getElementById","style","borderWidth","divisionLineWidth","strataWidth","getWidths","interfaceWidth","size","nested","upperInterfaceColor","lowerInterfaceColor","color","getRealName","diffuse","transition","profile","upperRect","rect","fill","lowerRect","x","borderPath","path","stroke","divisionPath","drawCustomInterface","getThicknesses","fillStrata","lowerStrata","drawCM","leftBorder","rightBorder","bottomBorder","ratio","parseInt","substr","begin","rectHeight","topX","pathString","divisor","topY","downY","group","defs","clipWith","w","h","poisson","pds","poissonDisk","PoissonDiskSampler","char","addImage","drawalternatingBands","push","isSubCharacteristic","j","createPointsPerso","min","max","img","imgw","imgh","pointList","image","t","thickness","type","nb_hop","bottomBackgroundColor","topBackgroundColor","interfaceLineThickness","strokeColor","bubbleTransitionSize","point","circle","line","nb","h_hop","rnd","getRandomInt","rndx","lineAttrs","Array","lineString","tString","path1","path2","startHeight","heightBottom","Math","floor","random","nb_lines","a","id","url","content"],"mappings":"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","file":"graphGenerationUtil.js","sourcesContent":["/**\n * Created by Thierry Hubmann\n * Cette classe utilise la librairie graphique SVG.js pour générer le SVG\n * d'une stratigraphie ou d'une strate.\n */\n\nimport {Stratigraphy} from '../business/stratigraphy';\nimport {Strata} from '../business/stratigraphy';\nimport {Characteristic} from '../business/characteristic';\nimport {SubCharacteristic} from '../business/subCharacteristic';\nimport {PoissonDiskSampler} from '../algorithms/poissonDisk';\n\nimport * as utils from '../nodeServices/nodeUtils.js';\n\nclass GraphGenerationUtil {\n    constructor(win, stratig) {\n        if (win != null) {\n            this.window = win;\n            /*On appelle la librairie SVG.js depuis un module Node.js car celle ci\n             n'est pas compatible avec ES2015 si l'on veut lui donner le paramètre window\n             */\n            utils.getDrawer(win);\n        }\n        this.stratig = stratig;\n    }\n\n    /**\n     * Cette méthode est utilisée par Node.js pour dessiner la stratigraphie entière\n     */\n    drawStratigraphy(width) {\n\n\n        var stratigraphyHeight = 0;\n        var resultDraw = SVG(this.window.document.documentElement);\n        resultDraw.attr(\"shape-rendering\",\"crispEdges\");\n        console.log(\"Nb of strata:\" + this.stratig.getStratas().length);\n        for (var i = 0; i < this.stratig.getStratas().length; i++) {\n            var str = this.stratig.getStratas()[i];\n            console.log('strataUid: ' + str.getUid());\n            var nestedInterface = this.drawInterface(str, null, resultDraw);\n            if (nestedInterface)\n            {\n                nestedInterface.y(stratigraphyHeight);\n                stratigraphyHeight = stratigraphyHeight + nestedInterface.height();\n            }\n            var nestedStrata = this.drawStrata(str, null, resultDraw);\n            nestedStrata.y(stratigraphyHeight);\n            stratigraphyHeight = stratigraphyHeight + nestedStrata.height();\n        }\n        //var box = resultDraw.viewbox();\n        var box = resultDraw.viewbox(0, 0, 500, stratigraphyHeight);\n        box.width(width);\n        var svgContent = resultDraw.svg();\n        // remove all svg nodes from dom to be ready for next rendering\n        resultDraw.clear();\n        return svgContent;\n    }\n\n    /**\n     * Cette méthode dessine l'interface de la strate\n     * @param strata la strate\n     * @param divID la div dans laquelle on veut dessiner l'interface\n     */\n    // Either pass divID (browser case) or svg.js draw context directly when called from nodejs\n    // the other argument must be null\n    drawInterface(strata, divID, draw) {\n        var index = strata.getIndex();\n\n\n        var interfaceHeight = 22;\n        var borderColor = 'black';\n\n        // CM stratum is itself an interface between M and CP strata so we don't draw any interface with a CM\n        // No interface above CM\n        if (strata.getCharacteristicsByFamily('natureFamily')[0].getName() == 'cmCharacteristic')\n            // we don't draw anything\n            return null;\n        // Nor below\n        if (strata.index > 0) {\n            var upperStrata = this.stratig.getStratas()[index - 1];\n            if (upperStrata.getCharacteristicsByFamily('natureFamily')[0].getName() == 'cmCharacteristic' && strata.getCharacteristicsByFamily('natureFamily')[0].getName() == 'mCharacteristic') {\n                return null;\n            }\n        }\n        if (divID) {\n            if (this.window == undefined) {\n                var interfaceDiv = document.getElementById(divID);\n                interfaceDiv.style.height = interfaceHeight + \"px\";\n            }\n            else {\n                var interfaceDiv = this.window.document.getElementById(divID);\n                interfaceDiv.style.height = interfaceHeight + \"px\";\n            }\n        }\n\n        var borderWidth = 8;\n        var divisionLineWidth = 5;\n\n        var strataWidth = 500;\n\n        if (strata.getCharacteristicsByFamily('widthFamily').length > 0) {\n            strataWidth = this.getWidths(strata.getCharacteristicsByFamily('widthFamily')[0].getName());\n        }\n\n        var interfaceWidth = strataWidth;\n\n        draw = draw || SVG(divID).size(interfaceWidth, interfaceHeight);\n\n        var nestedInterface = draw.nested();\n        nestedInterface.height(interfaceHeight);\n        nestedInterface.width(interfaceWidth);\n\n        var upperInterfaceColor = \"white\";  // couleur de fond de la partie haute\n        var lowerInterfaceColor = \"white\";  // couleur de fond de la partie basse\n\n        // si on est pas à la première interface alors on change la couleur de fond du haut\n        if (index > 0) {\n            if (this.stratig.getStratas()[index - 1].getCharacteristicsByFamily('colourFamily').length > 0) {\n                var color = this.stratig.getStratas()[index - 1].getCharacteristicsByFamily('colourFamily')[0].getRealName();\n                // !!! A MODIFIER QUAND ON FERA LE REFACTORING DU DAO...\n                if (color == \"black\") {\n                    upperInterfaceColor = '#474747';\n                } else if (color == 'dark red') {\n                    upperInterfaceColor = '#bc2c14';\n                } else if (color == 'light yellow') {\n                    upperInterfaceColor = '#fcf0be';\n                } else if (color == 'ochre') {\n                    upperInterfaceColor = '#cab91d';\n                } else if (color == 'dark green') {\n                    upperInterfaceColor = '#046424';\n                } else if (color == 'medium green') {\n                    upperInterfaceColor = '#3cbc65';\n                } else if (color == 'light green') {\n                    upperInterfaceColor = '#a2cfaf';\n                } else if (color == 'dark blue') {\n                    upperInterfaceColor = '#441cb3';\n                } else if (color == 'medium blue') {\n                    upperInterfaceColor = '#4cb3d4';\n                } else if (color == 'light blue') {\n                    upperInterfaceColor = '#a0cedb';\n                } else if (color != \"\" && color != \"undefined\") {\n                    upperInterfaceColor = color;\n                }\n            }\n        }\n\n        if (strata.getCharacteristicsByFamily('colourFamily').length > 0) {\n            var color = strata.getCharacteristicsByFamily('colourFamily')[0].getRealName();\n            // !!! A MODIFIER QUAND ON FERA LE REFACTORING DU DAO...\n            if (color == \"black\") {\n                lowerInterfaceColor = \"#474747\";\n            } else if (color == 'dark red') {\n                lowerInterfaceColor = '#bc2c14';\n            } else if (color == 'light yellow') {\n                lowerInterfaceColor = '#fcf0be';\n            } else if (color == 'ochre') {\n                lowerInterfaceColor = '#cab91d';\n            } else if (color == 'dark green') {\n                lowerInterfaceColor = '#046424';\n            } else if (color == 'medium green') {\n                lowerInterfaceColor = '#3cbc65';\n            } else if (color == 'light green') {\n                lowerInterfaceColor = '#a2cfaf';\n            } else if (color == 'dark blue') {\n                lowerInterfaceColor = '#441cb3';\n            } else if (color == 'medium blue') {\n                lowerInterfaceColor = '#4cb3d4';\n            } else if (color == 'light blue') {\n                lowerInterfaceColor = '#a0cedb';\n            } else if (color != \"\" && color != \"undefined\"){\n                lowerInterfaceColor = color;\n            }\n        }\n\n        var diffuse = false;\n        var transition = '';\n        if (strata.getCharacteristicsByFamily('interfaceTransitionFamily').length > 0) {\n            transition = strata.getCharacteristicsByFamily('interfaceTransitionFamily')[0].getName();\n            if (transition == \"diffuseCharacteristic\") {\n                diffuse = true;\n            }\n        }\n\n        var profile = '';\n        if (strata.getCharacteristicsByFamily('interfaceProfileFamily').length > 0) {\n            profile = strata.getCharacteristicsByFamily('interfaceProfileFamily')[0].getName();\n        }\n\n\n        //On va maintenant dessiner l'interface\n\n        //Si elle est droite on dessine simplement deux rectangles\n        if (profile == 'straightCharacteristic' || profile == '') {\n            var upperRect = nestedInterface.rect(interfaceWidth, interfaceHeight).attr({fill: upperInterfaceColor});\n            var lowerRect = nestedInterface.rect(interfaceWidth, interfaceHeight).x(0).y(interfaceHeight / 2).attr({fill: lowerInterfaceColor});\n\n            //On dessine la bordure extérieure et la droite qui sépare les strates\n            var borderPath = nestedInterface.path(\"M0 0L0 \" + interfaceHeight + \" M\" + strataWidth + \" \" + \" 0L\" + interfaceWidth + \" \" + interfaceHeight).fill('none');\n            borderPath.stroke({color: borderColor, width: borderWidth});\n\n            var divisionPath = nestedInterface.path(\"M0 \" + (interfaceHeight / 2) + \"L\" + interfaceWidth + \" \" + (interfaceHeight / 2)).fill('none');\n            divisionPath.stroke({color: borderColor, width: divisionLineWidth});\n        }\n        else if (profile == 'wavyCharacteristic') {\n            this.drawCustomInterface(nestedInterface, index, interfaceWidth, interfaceHeight, 'wavy', 8, lowerInterfaceColor, upperInterfaceColor, borderWidth, divisionLineWidth, diffuse, transition);\n        }\n        else if (profile == 'bumpyCharacteristic') {\n            this.drawCustomInterface(nestedInterface, index, interfaceWidth, interfaceHeight, 'bumpy', 20, lowerInterfaceColor, upperInterfaceColor, borderWidth, divisionLineWidth, diffuse, transition);\n        }\n        else if (profile == 'irregularCharacteristic') {\n            this.drawCustomInterface(nestedInterface, index, interfaceWidth, interfaceHeight, 'irregular', 30, lowerInterfaceColor, upperInterfaceColor, borderWidth, divisionLineWidth, diffuse, transition);\n        }\n\n        return nestedInterface;\n\n    }\n\n    /**\n     * Cette méthode permet de dessiner une strate\n     * @param strata\n     * @param divID La div dans laquelle on veut dessiner la strate\n     */\n    // Either pass divID (browser case) or svg.js draw context directly when called from nodejs\n    // the other argument must be null\n    drawStrata(strata, divID, draw) {\n        var borderColor = 'black';\n\n        var height = 100;\n        var width = 500;\n        if (strata.getCharacteristicsByFamily('thicknessFamily').length > 0) {\n            height = this.getThicknesses(strata.getCharacteristicsByFamily('thicknessFamily')[0].getName());\n        }\n\n        if (strata.getCharacteristicsByFamily('widthFamily').length > 0) {\n            width = this.getWidths(strata.getCharacteristicsByFamily('widthFamily')[0].getName());\n        }\n        if (divID) {\n\n            if (this.window == undefined) {\n                document.getElementById(divID).style.height = height + \"px\";\n            } else {\n                this.window.document.getElementById(divID).style.height = height + \"px\";\n            }\n        }\n        var borderWidth = 8;\n\n        draw = draw || SVG(divID).size(width, height);\n\n\n        //on crée un groupe pour englober la strate et pour pouvoir la réutiliser\n        var nestedStrata = draw.nested();\n        nestedStrata.height(height);\n        nestedStrata.width(width);\n\n        this.fillStrata(nestedStrata, strata);\n        //Strate CM\n        if (strata.getCharacteristicsByFamily('natureFamily')[0].getName() == 'cmCharacteristic') {\n            if (strata.getIndex() < this.stratig.getStratas().length - 1) {\n                var lowerStrata = this.stratig.getStratas()[strata.getIndex() + 1];\n                if (lowerStrata.getCharacteristicsByFamily('natureFamily')[0].getName() == 'mCharacteristic') {\n                    this.drawCM(strata, width, height, nestedStrata);\n                }\n            }\n        }\n\n        //Dessin des bords\n        var leftBorder = nestedStrata.path(\"M0 0L0 \" + height).fill('none');\n        var rightBorder = nestedStrata.path(\"M\" + width + \" 0L\" + width + \" \" + height).fill('none');\n        leftBorder.stroke({color: borderColor, width: borderWidth});\n        rightBorder.stroke({color: borderColor, width: borderWidth});\n\n        //Dessin du bord inférieur si c'est la dernière strate\n        if (strata.getIndex() == this.stratig.getStratas().length - 1) {\n            var bottomBorder = nestedStrata.path(\"M0 \" + height + \"L\" + width + \" \" + height).fill('none');\n            bottomBorder.stroke({color: borderColor, width: borderWidth});\n        }\n\n        //On retourne le dessin de la strate\n        return nestedStrata;\n\n    }\n\n    /**\n     * Cette méthode s'occupe de dessiner la strate CM\n     */\n    drawCM(strata, width, height, draw) {\n        var upperStrata;\n        if (strata.getIndex() > 0) {\n            upperStrata = this.stratig.getStratas()[strata.getIndex() - 1];\n        }\n\n        var lowerStrata = this.stratig.getStratas()[strata.getIndex() + 1];\n\n        //On remplit le fond de la strate avec le même fond que la strate inférieure\n        this.fillStrata(draw, lowerStrata, width, height);\n\n\n        //On dessine ensuite une forme qui permet de cacher une partie de la strate pour donner\n        //l'illusion que les triangles s'agrandissent/rapetississent\n        if (strata.getCharacteristicsByFamily('cmCorrosionRatioFamily').length > 0) {\n            var ratio = strata.getCharacteristicsByFamily('cmCorrosionRatioFamily')[0].getRealName();\n            ratio = parseInt(ratio.substr(1));\n        }\n        else {\n            ratio = 0;\n        }\n\n\n        var begin = 0;\n        switch (ratio) {\n            case 1:\n                begin = 0 - 2 * height / 9 * 1;\n                break;\n            case 2:\n                begin = 0 - height;\n                break;\n            case 3:\n                begin = 0 - 2 * height / 9 * 8;\n                break;\n\n        }\n\n        var rectHeight = begin + height;\n        var topX = rectHeight + height;\n        var pathString = 'M 0 ' + begin + ' L ' + width + ' ' + begin + ' L ' + width + ' ' + rectHeight;\n\n        //On dessine les triangles en fonction des dimensions de la strate\n        //Ces triangles se trouve par dessus un rectangle qui fait les dimensions d'une strate\n        for (var i = 0; i < 7; i++) {\n            var divisor = 8;\n            var topY = width - (i + 1) * (width / divisor) - i * (width / divisor);\n            var downY = topY - width / divisor;\n            pathString = pathString + ' L ' + topY + ' ' + topX + ' L ' + downY + ' ' + rectHeight;\n        }\n\n        if (upperStrata != undefined) {\n\n            var group = draw.group();\n            this.fillStrata(group, upperStrata, width, height);\n            //if (upperStrata.getCharacteristicsByFamily('colourFamily').length > 0) {\n            //upperStrataColor = upperStrata.getCharacteristicsByFamily('colourFamily')[0].getRealName();\n            //}\n            var defs = draw.defs();\n            var path = defs.path(pathString).attr({fill: 'none'});\n            group.clipWith(path);\n        }\n        else {\n            draw.path(pathString).attr({fill: 'white'});\n        }\n\n    }\n\n    /**\n     * Cette méthode remplit la strate avec les images et les éléments générés\n     * @param canvas\n     * @param strata\n     */\n    fillStrata(draw, strata, w, h) {\n\n\n        //Création d'un groupe pour le contenu du fond de la strate pour pouvoir le réutiliser\n        var group = draw.group;\n\n        var height = 100;\n        var width = 500;\n\n        if (w != undefined) {\n            height = h;\n        }\n        else if (strata.getCharacteristicsByFamily('thicknessFamily').length > 0) {\n            height = this.getThicknesses(strata.getCharacteristicsByFamily('thicknessFamily')[0].getName());\n        }\n\n        if (w != undefined) {\n            width = w;\n        }\n        else if (strata.getCharacteristicsByFamily('widthFamily').length > 0) {\n            width = this.getWidths(strata.getCharacteristicsByFamily('widthFamily')[0].getName());\n        }\n\n\n        // Initialisation du POISSON DISK DISTRIBUTION\n        var poisson = [];\n        //Instance browser\n        if (this.window == undefined) {\n            var pds = new poissonDisk.PoissonDiskSampler(width, height);\n        }\n        //Instance Node.js\n        else {\n            var pds = new PoissonDiskSampler(width, height);\n        }\n\n        var color = 'white';\n        if (strata.getCharacteristicsByFamily('colourFamily').length > 0) {\n            color = strata.getCharacteristicsByFamily('colourFamily')[0].getRealName();\n        }\n\n        // !!! A MODIFIER QUAND ON FERA LE REFACTORING DU DAO...\n        if (color == 'black') {\n            color = '#474747';\n        }\n        if (color == 'dark red') {\n            color = '#bc2c14';\n        }\n        if (color == 'light yellow') {\n            color = '#fcf0be';\n        }\n        if (color == 'ochre') {\n            color = '#cab91d';\n        }\n        if (color == 'dark green') {\n            color = '#046424';\n        }\n        if (color == 'medium green') {\n            color = '#3cbc65';\n        }\n        if (color == 'light green') {\n            color = '#a2cfaf';\n        }\n        if (color == 'dark blue') {\n            color = '#441cb3';\n        }\n        if (color == 'medium blue') {\n            color = '#4cb3d4';\n        }\n        if (color == 'light blue') {\n            color = '#a0cedb';\n        }\n\n        var rect = draw.rect(width, height).attr({fill: color});\n\n        if (strata.getCharacteristicsByFamily('porosityFamily').length > 0) {\n            var char = strata.getCharacteristicsByFamily('porosityFamily')[0].getName();\n\n            switch (char) {\n                case 'slightlyPorousCharacteristic':\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Porosity/CP_SlightlyPorous_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n                case 'porousCharacteristic':\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Porosity/CP_Porous_\" + height + \"x\" + width + \".svg\", width, height);\n\n                    break;\n                case 'highlyPorousCharacteristic':\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Porosity/CP_HighlyPorous_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n            }\n        }\n\n\n        //cprimicrostructure\n        if (strata.getCharacteristicsByFamily('cpriMicrostructureFamily').length > 0) {\n            var char = strata.getCharacteristicsByFamily('cpriMicrostructureFamily')[0].getName();\n            switch (char) {\n                case \"pseudomorphOfGranularCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/grains/GrainsGris_\" + height + \"x\" + width + \".png\", width, height);\n                    break;\n\n                case \"pseudomorphOfDendriticCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Dendrite/CP_Dendrite_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n\n                case \"hexagonalNetworkCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/hexagonal.png\", width, height);\n                    break;\n\n                case \"alternatingBandsCharacteristic\":\n                    this.drawalternatingBands(draw, 6, 10, width, height);\n                    break;\n\n                case \"cristallineMicrostructureCharacteristic\":\n                    poisson.push({'min': 13, 'max': 13, 'img': 'scattered2', 'imgw': 27, 'imgh': 27});\n                    break;\n\n                case \"isolatedAggregateMicrostructureCharacteristic\":\n                    poisson.push({'min': 30, 'max': 60, 'img': 'isolated', 'imgw': 55, 'imgh': 27});\n                    break;\n\n                case \"scatteredAggregateMicrostructureCharacteristic\":\n                    poisson.push({'min': 32, 'max': 60, 'img': 'scattered1', 'imgw': 43, 'imgh': 39});\n                    poisson.push({'min': 23, 'max': 60, 'img': 'scattered2', 'imgw': 27, 'imgh': 27});\n                    break;\n            }\n        }\n\n\n        //subcprimicrostructure\n        if (strata.isSubCharacteristic('eutecticPhaseNoMicrostructureCpri') || strata.isSubCharacteristic('eutecticPhaseCristallineMicrostructureCpri') ||\n            strata.isSubCharacteristic('eutecticPhaseIsolatedAggregateMicrostructureCpri') || strata.isSubCharacteristic('eutecticPhaseScatteredAggregateMicrostructureCpri') ||\n            strata.isSubCharacteristic('eutecticPhaseAlternatingBandsCpri') || strata.isSubCharacteristic('eutecticPhaseHexagonalNetworkCpri') ||\n            strata.isSubCharacteristic('eutecticPhasePseudomorphOfDendriticCpri') || strata.isSubCharacteristic('eutecticPhasePseudomorphOfGranularCpri')) {\n\n            this.addImage(draw, \"../static/micorr/images/c/M/EutheticPhase/M_EutheticPhase_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n        if (strata.isSubCharacteristic('twinLinesNoMicrostructureCpri') || strata.isSubCharacteristic('twinLinesCristallineMicrostructureCpri') ||\n            strata.isSubCharacteristic('twinLinesIsolatedAggregateMicrostructureCpri') || strata.isSubCharacteristic('twinLinesScatteredAggregateMicrostructureCpri') ||\n            strata.isSubCharacteristic('twinLinesAlternatingBandsCpri') || strata.isSubCharacteristic('twinLinesHexagonalNetworkCpri') ||\n            strata.isSubCharacteristic('twinLinesPseudomorphOfDendriticCpri') || strata.isSubCharacteristic('twinLinesPseudomorphOfGranularCpri')) {\n\n            this.addImage(draw, \"../static/micorr/images/c/CP/TwinLines/CP_TwinLinesGrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        if (strata.isSubCharacteristic('inclusionsNoMicrostructureCpri') || strata.isSubCharacteristic('inclusionsCristallineMicrostructureCpri') ||\n            strata.isSubCharacteristic('inclusionsIsolatedAggregateMicrostructureCpri') || strata.isSubCharacteristic('inclusionsScatteredAggregateMicrostructureCpri') ||\n            strata.isSubCharacteristic('inclusionsAlternatingBandsCpri') || strata.isSubCharacteristic('inclusionsHexagonalNetworkCpri') ||\n            strata.isSubCharacteristic('inclusionsPseudomorphOfDendriticCpri') || strata.isSubCharacteristic('inclusionsPseudomorphOfGranularCpri')) {\n\n            this.addImage(draw, \"../static/micorr/images/c/CP/Inclusion/CP_InclusionGrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n\n        //MmicrostructureFamily\n        if (strata.getCharacteristicsByFamily('mMicrostructureFamily').length > 0) {\n            var char = strata.getCharacteristicsByFamily('mMicrostructureFamily')[0].getName();\n            switch (char) {\n                case \"dendriticCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/M/Dendrites/M_Dendrites_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n                case \"deformedDendritesCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/M/Dendrites/M_DeformedDendrites_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n                case \"grainSmallCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/M/Grain/M_GrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n                case \"grainLargeCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/M/Grain/M_GrainLarge_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n                case \"grainElongatedCharacteristic\":\n                    this.addImage(draw, \"../static/micorr/images/c/M/Grain/M_GrainElongated_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n            }\n\n        }\n\n\n        //SubmMicrostructure\n        if (strata.isSubCharacteristic('eutecticPhaseDendritic') || strata.isSubCharacteristic('eutecticPhaseGrainElongated') ||\n            strata.isSubCharacteristic('eutecticPhaseGrainLarge') || strata.isSubCharacteristic('eutecticPhaseGrainSmall')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/EutheticPhase/M_EutheticPhase_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('eutecticPhaseDeformedDendritic')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/EutheticPhase/M_EutheticPhaseDeformedDendrite_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n        if (strata.isSubCharacteristic('twinLinesDendritic') || strata.isSubCharacteristic('twinLinesGrainSmall')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/TwinLines/M_TwinLinesGrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('twinLinesGrainElongated')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/TwinLines/M_TwinLinesGrainElongated_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('twinLinesGrainLarge')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/TwinLines/M_TwinLinesGrainLarge_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n\n        if (strata.isSubCharacteristic('slipLinesDendritic') || strata.isSubCharacteristic('slipLinesGrainSmall')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/SlipLines/M_SlipLinesGrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('slipLinesGrainElongated')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/SlipLines/M_SlipLinesGrainElongated_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('slipLinesGrainLarge')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/SlipLines/M_SlipLinesGrainLarge_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n\n        if (strata.isSubCharacteristic('inclusionsDendritic') || strata.isSubCharacteristic('inclusionsGrainSmall') || strata.isSubCharacteristic('inclusionsGrainElongated')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/Inclusion/M_InclusionGrainSmall_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n        else if (strata.isSubCharacteristic('inclusionsGrainLarge')) {\n            this.addImage(draw, \"../static/micorr/images/c/M/Inclusion/M_InclusionGrainLarge_\" + height + \"x\" + width + \".svg\", width, height);\n        }\n\n\n        //Fissures\n        if (strata.getCharacteristicsByFamily('crackingFamily').length > 0) {\n            var char = strata.getCharacteristicsByFamily('crackingFamily')[0].getName();\n            switch (char) {\n                case \"simpleCracksCharacteristic\" :\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Cracking/Simple/CP_CrackingSimpleHorizontale_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n\n                case \"branchedCracksCharacteristic\" :\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Cracking/Branched/CP_CrackingBranched_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n\n                case \"networkCracksCharacteristic\" :\n                    this.addImage(draw, \"../static/micorr/images/c/CP/Cracking/Network/CP_CrackingNetwork_\" + height + \"x\" + width + \".svg\", width, height);\n                    break;\n            }\n        }\n\n        if (strata.getCharacteristicsByFamily('cohesionFamily').length > 0) {\n            var char = strata.getCharacteristicsByFamily('cohesionFamily')[0].getName();\n            if (char == 'powderyCharacteristic') {\n\n                this.addImage(draw, \"../static/micorr/images/c/CP/Cohesion/CP_CohesionPowdery_\" + height + \"x\" + width + \".svg\", width, height);\n            }\n        }\n\n        //Parcours et affichage des dessins générés par le poissonDisk:\n        for (var i = 0; i < 500; i++) {\n            for (var j = 0; j < poisson.length; j++) {\n                // Création des points\n                pds.createPointsPerso(poisson[j].min, poisson[j].max, poisson[j].img, poisson[j].imgw, poisson[j].imgh);\n            }\n        }\n\n\n        //On dessine les images pour les points dans le tableau PoissonDisk\n        //Pour l'instant ces images sont en png, il faudra les exporter en svg\n        for (var i = 0; i < pds.pointList.length; i++) {\n            var image = this.addImage(draw, \"../static/micorr/images/c/\" + pds.pointList[i].t + \".png\", pds.pointList[i].w, pds.pointList[i].h);\n            image.x(pds.pointList[i].x - pds.pointList[i].w / 2);\n            image.y(pds.pointList[i].y - pds.pointList[i].h / 2);\n\n        }\n    }\n\n    getThicknesses(thickness) {\n        if (thickness == \"thickCharacteristic\")\n            return 150;\n        else if (thickness == \"normalThicknessCharacteristic\")\n            return 100;\n        else if (thickness == \"thinCharacteristic\")\n            return 50;\n        else\n            return 100;\n\n    }\n\n    getWidths(width) {\n        if (width == \"largeCharacteristic\")\n            return 650;\n        else if (width == \"normalWidthCharacteristic\")\n            return 500;\n        else if (width == \"smallCharacteristic\")\n            return 300;\n        else\n            return 500;\n    }\n\n    drawCustomInterface(draw, index, width, height, type, nb_hop, bottomBackgroundColor, topBackgroundColor, borderWidth, interfaceLineThickness, diffuse, transition) {\n        /* Le dessin des interfaces se fait en 3 étapes\n         *  1) Tout d'abord on colorie la zone de dessin avec la couleur topBackground et sans cadre\n         *  2) on dessine la ligne d'interface avec le tableau line = []\n         *  3) on dessine la ligne d'interface accompagnée d'un polygone qui vient faire office de partie inférieure de l'interface et avec la couleur bottombackgroundcolor\n         */\n\n        // Si la couleur des deux strates est noire alors la ligne d'interface est blanche\n        var strokeColor = \"black\";\n        if (bottomBackgroundColor == \"black\" && topBackgroundColor == \"black\")\n            strokeColor = \"white\";\n\n        var bubbleTransitionSize = 4;\n\n        // BEFORE : var rect = paper.rect(0, 0, width, height).attr(\"stroke-width\", 0); // zone de dessin sans cadre\n        var rect = draw.rect(width, height).fill('none');\n        if ((transition == \"semiGradualInferiorCharacteristic\" || transition == \"gradualCharacteristic\") && index != 0) {\n            //Instance Browser\n            if (this.window == undefined) {\n                var pds = new poissonDisk.PoissonDiskSampler(width, height);\n            }\n            //Instance Node.js\n            else {\n                var pds = new PoissonDiskSampler(width, height);\n            }\n            for (var i = 0; i < 50; i++)\n                pds.createPointsPerso(10, 10, 'none', 0, 0);\n            for (var i = 0; i < pds.pointList.length; i++) {\n                // BEFORE: paper.circle(pds.pointList[i].x, pds.pointList[i].y + bubbleTransitionSize, bubbleTransitionSize).attr(\"fill\", bottomBackgroundColor);\n                var point = draw.circle(bubbleTransitionSize);\n                point.x(pds.pointList[i].x);\n                point.y(pds.pointList[i].y);\n                point.fill(bottomBackgroundColor);\n            }\n        }\n\n\n        rect.attr(\"fill\", topBackgroundColor);\n        var y = height / 2;\n        var t = [];\n        var line = [];\n        var nb = nb_hop;\n        var x = 0;\n        var h_hop = width / nb;\n        var y = height / 2;\n        for (var i = 0; i < nb; i++) {\n            t.push('M');\n            line.push('M');\n            t.push(x);\n            line.push(x);\n            t.push(y);\n            line.push(y);\n            t.push('Q');\n            line.push('Q');\n            // on utilise les courbes de béziers pour faire des vagues\n            if (type == \"wavy\") {\n                t.push(x + width / nb / 2);\n                line.push(x + width / nb / 2);\n                if ((i % 2) == 0) {\n                    line.push(y + y / 2);\n                    t.push(y + y / 2);\n                }\n                else {\n                    line.push(y - y / 2);\n                    t.push(y - y / 2);\n                }\n            }\n            else if (type == \"bumpy\") { // on fait des bosses avec les courbes de béziers en introduisant des hauteurs aléatoires\n                t.push(x + width / nb / 2);\n                line.push(x + width / nb / 2);\n                var rnd = this.getRandomInt(0, y);\n                if ((i % 2) == 0) {\n                    line.push(y + rnd);\n                    t.push(y + rnd);\n                }\n                else {\n                    line.push(y - rnd);\n                    t.push(y - rnd);\n                }\n            }\n            else if (type == \"irregular\") { // on faire des formes irrégulières avec les courbes de béziers avec des valeurs aléatoires\n                var rndx = this.getRandomInt(0, width / nb);\n                t.push(x + rndx);\n                line.push(x + rndx);\n                var rnd = this.getRandomInt(-height * 0.8, height * 0.8);\n                line.push(y + rnd);\n                t.push(y + rnd);\n\n            }\n            line.push(x + h_hop);\n            t.push(x + h_hop);\n            line.push(y);\n            t.push(y);\n\n\n            t.push('L');\n            t.push(x + h_hop);\n            t.push(height);\n            t.push('L');\n            t.push(x);\n            t.push(height);\n\n            x += h_hop;\n        }\n\n        var lineAttrs = new Array();\n        lineAttrs.push({\"stroke-width\": interfaceLineThickness});\n\n        if (diffuse) {\n            lineAttrs.push({\"stroke-dasharray\": [\".\"]});\n            lineAttrs.push({\"stroke\": \"grey\"});\n        }\n        /*BEFORE\n         paper.path(line).attr(\"stroke\", strokeColor).attr(lineAttrs);\n         paper.path(t).attr(\"fill\", bottomBackgroundColor).attr(\"stroke\", bottomBackgroundColor);;\n         */\n        var lineString = '';\n        for (var i = 0; i < line.length; i++) {\n            lineString = lineString + line[i] + ' ';\n        }\n\n        var tString = '';\n        for (var i = 0; i < t.length; i++) {\n            tString = tString + t[i] + ' ';\n        }\n        var path1 = draw.path(lineString).fill('none');\n        var path2 = draw.path(tString).fill(bottomBackgroundColor);\n        path1.stroke({color: strokeColor, width: 5});\n        path2.stroke({color: bottomBackgroundColor, width: 1});\n        // Si c'est la première interface alros la bordure extérieure commence au milieu\n        var startHeight = 0;\n        if (index == 0) {\n            startHeight = height / 2;\n        }\n\n        var leftBorder = draw.path(\"M0 \" + startHeight + \"L0 \" + height).fill('none');\n        leftBorder.stroke({color: 'black', width: borderWidth});\n\n        var rightBorder = draw.path(\"M\" + width + \" \" + startHeight + \"L\" + width + \" \" + height).fill('none');\n        rightBorder.stroke({color: 'black', width: borderWidth});\n\n        if (transition == \"semiGradualSuperiorCharacteristic\" || transition == \"gradualCharacteristic\") {\n            var heightBottom = height / 2 - bubbleTransitionSize;\n            //Instance Browser\n            if (this.window == undefined) {\n                var pds = new poissonDisk.PoissonDiskSampler(width, height);\n            }\n            //Instance Node.js\n            else {\n                var pds = new PoissonDiskSampler(width, height);\n            }\n            for (var i = 0; i < 50; i++)\n                pds.createPointsPerso(10, 10, 'none', 0, 0);\n            for (var i = 0; i < pds.pointList.length; i++) {\n                var point = draw.circle(bubbleTransitionSize);\n                point.x(pds.pointList[i].x);\n                point.y(pds.pointList[i].y);\n                point.fill(topBackgroundColor);\n            }\n        }\n\n    }\n\n\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    drawalternatingBands(draw, nb_hop, nb_lines, width, height) {\n        var rect = draw.rect(0, 0, width, height).attr(\"stroke-width\", 0);\n\n        var y = height / nb_lines;\n\n        for (var a = 0; a < nb_lines; a++) {\n            var t = [];\n            var nb = nb_hop;\n            var x = 0;\n            var h_hop = width / nb;\n\n            for (var i = 0; i < nb; i++) {\n                t.push('M');\n                t.push(x);\n                t.push(y);\n                t.push('Q');\n\n                t.push(x + width / nb / 2);\n                if ((i % 2) == 0)\n                    t.push(y + height / nb_lines);\n                else\n                    t.push(y - height / nb_lines);\n\n                t.push(x + h_hop);\n                t.push(y);\n\n                x += h_hop;\n            }\n            y += height / nb_lines;\n\n            var pathString = '';\n            for (var i = 0; i < t.length; i++) {\n                pathString = pathString + t[i] + ' ';\n            }\n\n            var path = draw.path(pathString).fill('none');\n            path.stroke({color: 'grey', width: 1})\n        }\n    }\n\n    getDivID() {\n        return this.divID;\n    }\n\n    setDivID(id) {\n        this.divID = id;\n    }\n\n    setStratig(stratig) {\n        this.stratig = stratig;\n    }\n\n    getStratig() {\n        return this.stratig;\n    }\n\n    /**\n     * Cette méthode permet d'ajouter des images\n     * Sur nodeJS on extrait le contenu des images SVG et on l'ajoute au SVG généré\n     * @param draw\n     * @param url\n     * @param width\n     * @param height\n     * @returns {*}\n     */\n    addImage(draw, url, width, height) {\n        if (this.window) //node case we embed the images (svg and png) as datauri\n        {\n            const Datauri = require('datauri');\n            url = new Datauri(url).content;\n        }\n        var image = draw.image(url);\n        image.size(width, height);\n        return image;\n    }\n}\n\n\nexport {\n    GraphGenerationUtil\n}\n"]}