{"version":3,"sources":["../ES2015/business/strata.js"],"names":["Strata","nature","child","natureFamilyAbbrev","label","dependencies","characteristics","subCharacteristics","childStrata","secondaryComponents","init","i","length","getNature","family","filter","e","secondaryComponentIndex","property","inArrayProperty","c","find","getFamily","getFirstCharacteristicByFamily","splice","getCharacteristicsByFamily","name","exists","getUid","subCharacteristic","push","characteristic","findIndex","replaceCharacteristic","childStratum","uid","elem","split","toUpperCase","undefined","index","dep","reIDep","RegExp","dependency","search","console","log","familyName","characteristicSource","dependencyName","findDependency","Characteristic","updateCharacteristic","subCharacteristicSource","characteristicList","clearCharacteristicsFromFamily","cSource","addCharacteristic","sc","SubCharacteristic","replaceSubCharacteristic","updateSubCharacteristic","strataImage","interfaceImage","addDependency","jsonStrata","isInterface","getName","interfaces","children","toJson"],"mappings":"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","file":"strata.js","sourcesContent":["/**\n * Created by Thierry Hubmann\n *\n * Cette classe est développée en ES2015 et est recompilée avec Babel\n * C'est la classe business de la Strate\n */\n\nclass Strata {\n\n    constructor(nature, child) {\n        this.nature = nature;\n        this.natureFamilyAbbrev = null;\n        this.label = null;\n        this.dependencies = [];\n        this.characteristics = [];\n        this.subCharacteristics = [];\n        this.childStrata = [];\n        this.secondaryComponents = [{characteristics: [], subCharacteristics: []}];\n        this.child = child;\n\n        this.init();\n\n\n    }\n\n\n    /**\n     * Retourne une strate enfant de la nature en paramètres\n     * @param nature la nature recherchée\n     * @returns la strate enfant\n     */\n    getChildStrataByNature(nature) {\n\n        for (var i = 0; i < this.childStrata.length; i++) {\n            if (this.childStrata[i].getNature() == nature) {\n                return this.childStrata[i];\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * Retourne les characteristiques correspondant à la famille donnée en paramètre\n     * @param family la famille recherchée\n     * @returns les characteristiques correspondante\n     */\n    getCharacteristicsByFamily(family) {\n        return this.characteristics.filter(e => e.family == family);\n    }\n\n    getSecondaryComponentCharacteristicsByFamily(family, secondaryComponentIndex=0) {\n        return this.secondaryComponents[secondaryComponentIndex].characteristics.filter(e => e.family == family);\n    }\n\n    /**\n     * Returns either first characteristic with requested family\n     * or its requested property\n     * @param family: characteristics's family searched\n     * @param property: (optional) property of the charasteric object requested\n     * @param inArrayProperty: (optional default to \"characteristics\") Array or name of the Array property in Strata where to search for characteristic\n     * @returns characteristic object / characteristic[property] value\n     */\n    getFirstCharacteristicByFamily(family, property, inArrayProperty=\"characteristics\") {\n        if (typeof(inArrayProperty)==\"string\")\n            inArrayProperty=this[inArrayProperty];\n        let c = inArrayProperty.find(e => e.getFamily() == family);\n        if (!property)\n            return c;\n        else {\n            if (c)\n                return c[property];\n            else\n                return c;\n        }\n    }\n    getFirstSecondaryComponentCharacteristicByFamily(family, property, secondaryComponentIndex=0) {\n        return this.getFirstCharacteristicByFamily(family, property, this.secondaryComponents[secondaryComponentIndex].characteristics)\n    }\n    /**\n     * Returns either first subCharacteristics with requested family\n     * or its requested property\n     * @param family: subCharacteristics's family searched\n     * @param property: (optional) property of the SubCharacteristic object requested\n     * @returns characteristic object / characteristic[property] value\n     */\n    getFirstSubCharacteristicByFamily(family, property) {\n        return this.getFirstCharacteristicByFamily(family, property, this.subCharacteristics);\n    }\n    getFirstSecondaryComponentSubCharacteristicByFamily(family, property,secondaryComponentIndex=0) {\n        return this.getFirstCharacteristicByFamily(family, property, this.secondaryComponents[secondaryComponentIndex].subCharacteristics);\n    }\n\n    /**\n     * Retourne les sous caractéristiques de la famille en paramètre\n     * @param family\n     * @returns {Array} liste de sous caractéristiques\n     */\n    getSubCharacteristicsByFamily(family) {\n        return this.subCharacteristics.filter(e => e.family == family);\n    }\n\n    getSecondaryComponentSubCharacteristicsByFamily(family, secondaryComponentIndex=0) {\n        return this.secondaryComponents[secondaryComponentIndex].subCharacteristics.filter(e => e.family == family);\n    }\n\n    /**\n     * Supprime toutes les characteristiques d'une famille\n     * @param family\n     */\n    clearCharacteristicsFromFamily(family) {\n\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (this.characteristics[i].getFamily() == family) {\n                this.characteristics.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    /**\n     * Supprime toutes les sous characteristiques d'une famille\n     * @param family\n     */\n    clearSubCharacteristicsFromFamily(family) {\n        for (var i = 0; i < this.subCharacteristics.length; i++) {\n            if (this.subCharacteristics[i].getFamily() == family) {\n                this.subCharacteristics.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    isFamily(family) {\n        return (this.getCharacteristicsByFamily(family).length > 0);\n    }\n\n    /**\n     * Cette méthode indique si une sous-caracterisitique existe dans une strate.\n     * @param le nom de la sous caracteristique à vérifier\n     * @returns boolean indiquant si la sous-caracteristique existe\n     */\n    isSubCharacteristic(name) {\n        var exists = false;\n        var i = 0;\n        while (exists == false && i < this.subCharacteristics.length) {\n            if (this.subCharacteristics[i].getUid() == name) {\n                exists = true;\n            }\n            i++;\n        }\n        return exists;\n    }\n\n    /**\n     * Ajoute une sous caractéristique sans vérifier si il en existe déjà une pour cette famille\n     * @param subCharacteristic\n     */\n    addSubCharacteristic(subCharacteristic) {\n        this.subCharacteristics.push(subCharacteristic);\n    }\n     /**\n     * Remplace une sous caractéristique de la famille de celle donnée en paramètre\n     * @param characteristic / subcharacteristic\n      * inArrayProperty (\"characteristics\", \"subCharacteristics\", etc..)\n     */\n    replaceCharacteristic(characteristic, inArrayProperty=\"characteristics\") {\n        //todo refactoring switch characteristics and subCharacteristics to Map instead of Array\n        if (typeof(inArrayProperty)===\"string\")\n            inArrayProperty=this[inArrayProperty];\n        var i = inArrayProperty.findIndex(e => e.family == characteristic.family );\n        if (i==-1)\n            inArrayProperty.push(characteristic);\n        else\n            inArrayProperty[i] = characteristic;\n    }\n\n    /**\n     * Remplace une sous caractéristique de la famille de celle donnée en paramètre\n     * @param subCharacteristic\n     */\n    replaceSubCharacteristic(subCharacteristic,inArrayProperty=\"subCharacteristics\") {\n        this.replaceCharacteristic(subCharacteristic, inArrayProperty);\n    }\n\n    addCharacteristic(characteristic) {\n        this.characteristics.push(characteristic);\n    }\n\n    addChildStrata(childStratum) {\n        this.childStrata.push(childStratum);\n    }\n\n    /**\n     * Permet de savoir si la strate est une strate enfant.\n     * @returns Un booleen qui indique si c'est une strate enfant\n     */\n    isChild() {\n        return this.child;\n    }\n\n    /**\n     * Permet d'indiquer que la strate est une strate enfant\n     * @param child\n     */\n    setChild(child) {\n        this.child = child;\n    }\n\n\n    removeCharacteristic(uid) {\n\n    }\n\n    removeSubCharacteristic(uid) {\n\n    }\n\n    getSubCharacteristics() {\n        return this.subCharacteristics;\n    }\n\n    getCharacteristics() {\n        return this.characteristics;\n    }\n\n\n    getNature() {\n        return this.nature;\n    }\n\n    setNature(nature) {\n        this.nature = nature;\n    }\n\n    /**\n     * Return natureFamily abbreviation (or prefix) of the stratum (e.g. CP for Corrosion products)\n     */\n    getNatureFamilyAbbrev() {\n        if (this.characteristics)\n            this.natureFamilyAbbrev = this.natureFamilyAbbrev || this.characteristics.find(elem => elem.family == \"natureFamily\").name.split(\"Char\")[0].toUpperCase();\n        return this.natureFamilyAbbrev || \"\";\n    }\n\n    /**\n     * setter for label called by Stratigraphy object based on position of stratum in the stratigraphy\n     * and its NatureFamilyAbbrev (e.g: CP2, MC1...)\n     */\n    setLabel(label) {\n        this.label = label;\n    }\n\n    getLabel() {\n        return (this.label);\n    }\n\n    getUid() {\n        return this.uid;\n    }\n\n    setUid(uid) {\n        this.uid = uid;\n    }\n\n    getName() {\n        if (this.name == undefined) {\n            return this.uid;\n        }\n        else {\n            return this.name;\n        }\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    getIndex() {\n        return this.index;\n    }\n\n    setIndex(index) {\n        this.index = index;\n    }\n    addDependency(dep) {\n        this.dependencies.push(dep);\n    }\n    findDependency(dep) {\n        // temp use of case insensitive match before refactoring and using Map instead of list\n        // because of unwanted case differences between Family and dependency key. For ex.\n        // cprimicrostructureaggregatecompositionFamily vs cpriMicrostructureAggregateCompositionFamily\n\n        let reIDep = new RegExp(\"^\" + dep + \"$\", \"i\") ;\n        for (let dependency of this.dependencies) {\n            if (dependency.search(reIDep) == 0)\n            {\n                if (dependency!=dep)\n                    console.log('findDependency('+dep+')='+dependency);\n                return true;\n            }\n\n        }\n        return false;\n    }\n    /**\n     * Helper methods to update stratum Characteristic from controller scope variables\n     * @returns true if characteristic has been updated based on stratum dependency and characteristicSource\n     */\n    updateCharacteristic(familyName, characteristicSource, dependencyName=null, inArrayProperty=\"characteristics\")\n    {\n        dependencyName = dependencyName || familyName; //dependencyName defaults to familyName but could be different\n        if (characteristicSource && this.findDependency(dependencyName)) {\n            let c = new characteristic.Characteristic(familyName, characteristicSource);\n            this.replaceCharacteristic(c, inArrayProperty);\n            return true;\n        }\n        return false;\n    }\n    updateSecondaryComponentCharacteristic(familyName, characteristicSource, dependencyName, secondaryComponentIndex=0)\n    {\n        return this.updateCharacteristic(familyName, subCharacteristicSource, dependencyName, this.secondaryComponents[secondaryComponentIndex].characteristics);\n    }\n\n    updateCharacteristicList(familyName, characteristicList) {\n        if (this.findDependency(familyName)) {\n            this.clearCharacteristicsFromFamily(familyName);\n            for (let cSource of characteristicList)\n                this.addCharacteristic(new characteristic.Characteristic(familyName, cSource));\n            return true;\n        }\n        return false;\n    }\n\n    updateSubCharacteristic(familyName, subCharacteristicSource, dependencyName=null, inArrayProperty=\"subCharacteristics\") {\n        dependencyName = dependencyName || familyName; //dependencyName defaults to familyName but could be different\n        if (subCharacteristicSource && this.findDependency(dependencyName)) {\n            let sc = new subCharacteristic.SubCharacteristic(familyName, subCharacteristicSource);\n            this.replaceSubCharacteristic(sc, inArrayProperty);\n            return true;\n        }\n        return false;\n    }\n    updateSecondaryComponentSubCharacteristic(familyName, subCharacteristicSource, dependencyName, secondaryComponentIndex=0)\n    {\n        return this.updateSubCharacteristic(familyName, subCharacteristicSource, dependencyName, this.secondaryComponents[secondaryComponentIndex].subCharacteristics);\n    }\n\n    /**\n     * Permet d'enregistrer le dessin SVG.JS d'une image pour éviter de la redessiner à chaque fois\n     */\n    setStrataImage(strataImage) {\n        this.strataImage = strataImage;\n    }\n\n    getStrataImage() {\n        return this.strataImage;\n    }\n\n    setInterfaceImage(interfaceImage) {\n        this.interfaceImage = interfaceImage;\n    }\n\n    getInterfaceImage() {\n        return this.interfaceImage;\n    }\n\n\n    /**\n     * Cette méthode initialise la strate en ajoutant à un tableau les propriétés modifiables\n     * et en lui attribuant des valeurs par défaut\n     */\n    init() {\n\n        this.addDependency('thicknessFamily');\n        this.addDependency('widthFamily');\n        this.addDependency('continuityFamily');\n        this.addDependency('directionFamily');\n\n        //Les strates CM n'ont pas d'interface\n        if (this.nature != \"Corroded metal\") {\n            this.addDependency('interfaceprofileFamily');\n        }\n\n        if (this.nature == \"Soil\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('scompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Non-Metallic material\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('nmmcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n\n        if (this.nature == \"Deposit\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('dcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Pseudomorph of organic material\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('pomcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Corrosion products\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cprimicrostructureFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n            this.addDependency('cpcompositionextensionFamily');\n            this.addDependency('cprimicrostructureaggregatecompositionFamily');\n            this.addDependency('cprimicrostructureaggregatecompositionextensionFamily');\n            this.addDependency('cpcompositionFamily');\n            this.addDependency('subcpcompositionFamily');\n            this.addDependency('subsubcpcompositionFamily');\n            this.addDependency('subcprimicrostructureFamily');\n            this.addDependency('subcprimicrostructureaggregatecompositionFamily');\n            this.addDependency('subsubcprimicrostructureaggregatecompositionFamily');\n        }\n\n        if (this.nature == \"Metal\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('mmicrostructureFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('mcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n            this.addDependency('submmicrostructureFamily');\n            this.addDependency('submcompositionFamily');\n        }\n\n\n    }\n\n    toJson() {\n        var childStrata = [];\n\n        var jsonStrata = {'name': this.getUid(), 'characteristics': [], 'interfaces': [], 'children': []};\n\n        //On récupère les caractéristiques\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (!this.characteristics[i].isInterface()) {\n                jsonStrata.characteristics.push({'name': this.characteristics[i].getName()});\n            }\n        }\n        //On récupère les sous caractéristiques\n        for (var i = 0; i < this.subCharacteristics.length; i++) {\n            jsonStrata.characteristics.push({'name': this.subCharacteristics[i].getUid()});\n        }\n\n        //On récupère les caractéristiques d'interface\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (this.characteristics[i].isInterface()) {\n                jsonStrata.interfaces.push({'name': this.characteristics[i].getName()});\n            }\n        }\n\n        //On récupère les strates enfants si ce n'est pas une strate enfant\n        if (!this.child) {\n            for (var i = 0; i < this.childStrata.length; i++) {\n                jsonStrata.children.push(this.childStrata[i].toJson());\n            }\n        }\n\n        return jsonStrata;\n\n    }\n\n\n}\n\nexport {Strata};\n"]}