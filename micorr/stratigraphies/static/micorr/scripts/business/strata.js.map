{"version":3,"sources":["../ES2015/business/strata.js"],"names":["Strata","nature","child","natureFamilyAbbrev","label","dependencies","Array","characteristics","subCharacteristics","childStrata","init","i","length","getNature","family","charact","getFamily","push","property","c","find","e","splice","exists","getCharacteristicsByFamily","name","getUid","subCharacteristic","found","characteristic","childStratum","uid","elem","split","toUpperCase","undefined","index","dep","reIDep","RegExp","dependency","search","console","log","familyName","characteristicSource","findDependency","Characteristic","replaceCharacteristic","characteristicList","clearCharacteristicsFromFamily","cSource","addCharacteristic","subCharacteristicSource","sc","SubCharacteristic","replaceSubCharacteristic","strataImage","interfaceImage","addDependency","jsonStrata","isInterface","getName","interfaces","children","toJson"],"mappings":"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","file":"strata.js","sourcesContent":["/**\n * Created by Thierry Hubmann\n *\n * Cette classe est développée en ES2015 et est recompilée avec Babel\n * C'est la classe business de la Strate\n */\n\nclass Strata {\n\n    constructor(nature, child) {\n        this.nature = nature;\n        this.natureFamilyAbbrev = null;\n        this.label = null;\n        this.dependencies = new Array();\n        this.characteristics = new Array();\n        this.subCharacteristics = new Array();\n        this.childStrata = new Array();\n        this.child = child;\n\n        this.init();\n\n\n    }\n\n\n    /**\n     * Retourne une strate enfant de la nature en paramètres\n     * @param nature la nature recherchée\n     * @returns la strate enfant\n     */\n    getChildStrataByNature(nature) {\n\n        for (var i = 0; i < this.childStrata.length; i++) {\n            if (this.childStrata[i].getNature() == nature) {\n                return this.childStrata[i];\n            }\n        }\n        return null;\n    }\n\n\n    /**\n     * Retourne les characteristiques correspondant à la famille donnée en paramètre\n     * @param family la famille recherchée\n     * @returns les characteristiques correspondante\n     */\n    getCharacteristicsByFamily(family) {\n        var charact = [];\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (this.characteristics[i].getFamily() == family) {\n                charact.push(this.characteristics[i]);\n            }\n        }\n        return charact;\n    }\n\n    /**\n     * Returns either first characteristic with requested family\n     *  or its requested property\n     * @param family: characteristics's family searched\n     * @param property: (optional) property of the charasteric object requested\n     * @returns characteristic object / characteristic[property] value\n     */\n    getFirstCharacteristicByFamily(family, property) {\n        let c = this.characteristics.find(e => e.getFamily() == family);\n        if (!property)\n            return c;\n        else {\n            if (c)\n                return c[property];\n            else\n                return c;\n        }\n    }\n\n    /**\n     * Retourne les sous caractéristiques de la famille en paramètre\n     * @param family\n     * @returns {Array} liste de sous caractéristiques\n     */\n    getSubCharacteristicsByFamily(family) {\n        var charact = [];\n        for (var i = 0; i < this.subCharacteristics.length; i++) {\n            if (this.subCharacteristics[i].getFamily() == family) {\n                charact.push(this.subCharacteristics[i]);\n            }\n        }\n        return charact;\n    }\n\n    /**\n     * Supprime toutes les characteristiques d'une famille\n     * @param family\n     */\n    clearCharacteristicsFromFamily(family) {\n\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (this.characteristics[i].getFamily() == family) {\n                this.characteristics.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    /**\n     * Supprime toutes les sous characteristiques d'une famille\n     * @param family\n     */\n    clearSubCharacteristicsFromFamily(family) {\n        for (var i = 0; i < this.subCharacteristics.length; i++) {\n            if (this.subCharacteristics[i].getFamily() == family) {\n                this.subCharacteristics.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    isFamily(family) {\n        var exists = false;\n        if (getCharacteristicsByFamily(family).length > 0) {\n            exists = true;\n        }\n        return exists;\n    }\n\n    /**\n     * Cette méthoe indique si une sous-caracterisitique existe dans une strate.\n     * @param le nom de la sous caracteristique à vérifier\n     * @returns boolean indiquant si la sous-caracteristique existe\n     */\n    isSubCharacteristic(name) {\n        var exists = false;\n        var i = 0;\n        while (exists == false && i < this.subCharacteristics.length) {\n            if (this.subCharacteristics[i].getUid() == name) {\n                exists = true;\n            }\n            i++;\n        }\n        return exists;\n    }\n\n    /**\n     * Ajoute une sous caractéristique sans vérifier si il en existe déjà une pour cette famille\n     * @param subCharacteristic\n     */\n    addSubCharacteristic(subCharacteristic) {\n        this.subCharacteristics.push(subCharacteristic);\n    }\n\n    /**\n     * Remplace une sous caractéristique de la famille de celle donnée en paramètre\n     * @param subCharacteristic\n     */\n    replaceSubCharacteristic(subCharacteristic) {\n        var found = false;\n        var i = 0;\n\n        while (!found && i < this.subCharacteristics.length) {\n            if (subCharacteristic.family == this.subCharacteristics[i].family) {\n                found = true;\n                this.subCharacteristics[i] = subCharacteristic;\n            }\n            i++;\n        }\n        if (!found) {\n            this.subCharacteristics.push(subCharacteristic);\n        }\n    }\n\n    addCharacteristic(characteristic) {\n        this.characteristics.push(characteristic);\n    }\n\n    addChildStrata(childStratum) {\n        this.childStrata.push(childStratum);\n    }\n\n    replaceCharacteristic(characteristic) {\n        var found = false;\n        var i = 0;\n\n        while (!found && i < this.characteristics.length) {\n            if (characteristic.family == this.characteristics[i].family) {\n                found = true;\n                this.characteristics[i] = characteristic;\n            }\n            i++;\n        }\n        if (!found) {\n            this.characteristics.push(characteristic);\n        }\n\n    }\n\n    /**\n     * Permet de savoir si la strate est une strate enfant.\n     * @returns Un booleen qui indique si c'est une strate enfant\n     */\n    isChild() {\n        return this.child;\n    }\n\n    /**\n     * Permet d'indiquer que la strate est une strate enfant\n     * @param child\n     */\n    setChild(child) {\n        this.child = child;\n    }\n\n\n    removeCharacteristic(uid) {\n\n    }\n\n    removeSubCharacteristic(uid) {\n\n    }\n\n    getSubCharacteristics() {\n        return this.subCharacteristics;\n    }\n\n    getCharacteristics() {\n        return this.characteristics;\n    }\n\n\n    getNature() {\n        return this.nature;\n    }\n\n    setNature(nature) {\n        this.nature = nature;\n    }\n\n    /**\n     * Return natureFamily abbreviation (or prefix) of the stratum (e.g. CP for Corrosion products)\n     */\n    getNatureFamilyAbbrev() {\n        if (this.characteristics)\n            this.natureFamilyAbbrev = this.natureFamilyAbbrev || this.characteristics.find(function (elem) {\n                return elem.family == \"natureFamily\"\n            }).name.split(\"Char\")[0].toUpperCase()\n        if (this.natureFamilyAbbrev)\n            return this.natureFamilyAbbrev;\n        else\n            return \"\";\n    }\n\n    /**\n     * setter for label called by Stratigraphy object based on position of stratum in the stratigraphy\n     * and its NatureFamilyAbbrev (e.g: CP2, MC1...)\n     */\n    setLabel(label) {\n        this.label = label;\n    }\n\n    getLabel() {\n        return (this.label);\n    }\n\n    getUid() {\n        return this.uid;\n    }\n\n    setUid(uid) {\n        this.uid = uid;\n    }\n\n    getName() {\n        if (this.name == undefined) {\n            return this.uid;\n        }\n        else {\n            return this.name;\n        }\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    getIndex() {\n        return this.index;\n    }\n\n    setIndex(index) {\n        this.index = index;\n    }\n    addDependency(dep) {\n        this.dependencies.push(dep);\n    }\n    findDependency(dep) {\n        // temp use of case insensitive match before refactoring and using Map instead of list\n        // because of unwanted case differences between Family and dependency key. For ex.\n        // cprimicrostructureaggregatecompositionFamily vs cpriMicrostructureAggregateCompositionFamily\n\n        let reIDep = new RegExp(\"^\" + dep + \"$\", \"i\") ;\n        for (let dependency of this.dependencies) {\n            if (dependency.search(reIDep) == 0)\n            {\n                if (dependency!=dep)\n                    console.log('findDependency('+dep+')='+dependency);\n                return true;\n            }\n\n        }\n        return false;\n    }\n    /**\n     * Helper methods to update stratum Characteristic from controller scope variables\n     * @returns true if characteristic has been updated based on stratum dependency and characteristicSource\n     */\n    updateCharacteristic(familyName, characteristicSource)\n    {\n        if (characteristicSource && this.findDependency(familyName)) {\n            let c = new characteristic.Characteristic(familyName, characteristicSource);\n            this.replaceCharacteristic(c) ;\n            return true;\n        }\n        return false;\n    }\n\n    updateCharacteristicList(familyName, characteristicList) {\n        if (this.findDependency(familyName)) {\n            this.clearCharacteristicsFromFamily(familyName);\n            for (let cSource of characteristicList)\n                this.addCharacteristic(new characteristic.Characteristic(familyName, cSource));\n            return true;\n        }\n        return false;\n    }\n    updateSubCharacteristic(familyName, subCharacteristicSource) {\n        if (subCharacteristicSource && this.findDependency(familyName)) {\n            let sc = new subCharacteristic.SubCharacteristic(familyName, subCharacteristicSource);\n            this.replaceSubCharacteristic(sc);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Permet d'enregistrer le dessin SVG.JS d'une image pour éviter de la redessiner à chaque fois\n     */\n    setStrataImage(strataImage) {\n        this.strataImage = strataImage;\n    }\n\n    getStrataImage() {\n        return this.strataImage;\n    }\n\n    setInterfaceImage(interfaceImage) {\n        this.interfaceImage = interfaceImage;\n    }\n\n    getInterfaceImage() {\n        return this.interfaceImage;\n    }\n\n\n    /**\n     * Cette méthode initialise la strate en ajoutant à un tableau les propriétés modifiables\n     * et en lui attribuant des valeurs par défaut\n     */\n    init() {\n\n        this.addDependency('thicknessFamily');\n        this.addDependency('widthFamily');\n        this.addDependency('continuityFamily');\n        this.addDependency('directionFamily');\n\n        //Les strates CM n'ont pas d'interface\n        if (this.nature != \"Corroded metal\") {\n            this.addDependency('interfaceprofileFamily');\n        }\n\n        if (this.nature == \"Soil\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('scompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Non-Metallic material\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('nmmcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n\n        if (this.nature == \"Deposit\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('dcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Pseudomorph of organic material\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('pomcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n        }\n\n        if (this.nature == \"Corrosion products\") {\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('cprimicrostructureFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n            this.addDependency('cpcompositionextensionFamily');\n            this.addDependency('cprimicrostructureaggregatecompositionFamily');\n            this.addDependency('cprimicrostructureaggregatecompositionextensionFamily');\n            this.addDependency('cpcompositionFamily');\n            this.addDependency('subcpcompositionFamily');\n            this.addDependency('subsubcpcompositionFamily');\n            this.addDependency('subcprimicrostructureFamily');\n            this.addDependency('subcprimicrostructureaggregatecompositionFamily');\n            this.addDependency('subsubcprimicrostructureaggregatecompositionFamily');\n        }\n\n        if (this.nature == \"Metal\") {\n\n            this.addDependency('colourFamily');\n            this.addDependency('brightnessFamily');\n            this.addDependency('opacityFamily');\n            this.addDependency('magnetismFamily');\n            this.addDependency('porosityFamily');\n            this.addDependency('mmicrostructureFamily');\n            this.addDependency('cohesionFamily');\n            this.addDependency('hardnessFamily');\n            this.addDependency('crackingFamily');\n            this.addDependency('mcompositionFamily');\n            this.addDependency('interfacetransitionFamily');\n            this.addDependency('interfaceroughnessFamily');\n            this.addDependency('interfaceadherenceFamily');\n            this.addDependency('submmicrostructureFamily');\n            this.addDependency('submcompositionFamily');\n        }\n\n\n    }\n\n    toJson() {\n        var childStrata = [];\n\n        var jsonStrata = {'name': this.getUid(), 'characteristics': [], 'interfaces': [], 'children': []};\n\n        //On récupère les caractéristiques\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (!this.characteristics[i].isInterface()) {\n                jsonStrata.characteristics.push({'name': this.characteristics[i].getName()});\n            }\n        }\n        //On récupère les sous caractéristiques\n        for (var i = 0; i < this.subCharacteristics.length; i++) {\n            jsonStrata.characteristics.push({'name': this.subCharacteristics[i].getUid()});\n        }\n\n        //On récupère les caractéristiques d'interface\n        for (var i = 0; i < this.characteristics.length; i++) {\n            if (this.characteristics[i].isInterface()) {\n                jsonStrata.interfaces.push({'name': this.characteristics[i].getName()});\n            }\n        }\n\n        //On récupère les strates enfants si ce n'est pas une strate enfant\n        if (!this.child) {\n            for (var i = 0; i < this.childStrata.length; i++) {\n                jsonStrata.children.push(this.childStrata[i].toJson());\n            }\n        }\n\n        return jsonStrata;\n\n    }\n\n\n}\n\nexport {Strata};\n"]}