# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-07-02 16:10


from django.db import migrations

# ARTEFACT_FIELDS_METADATA = [{'field': f.name, 'name':f.verbose_name, 'text':f.help_text} for f in Artefact._meta.fields ]
ARTEFACT_FIELDS_METADATA = [
    {'field': 'id', 'name': 'ID', 'text': ''},
    {'field': 'created', 'name': 'created', 'text': ''},
    {'field': 'modified', 'name': 'modified', 'text': ''},
    {'field': 'description',
     'name': 'description of artefact',
     'text': 'A short description of the artefact. Can also include its general appearance (colour, presence or not of a corrosion layer, missing parts, large cracks, etc.)'},
    {'field': 'inventory_number',
     'name': 'inv. Number',
     'text': 'The inventory number of the artefact'},
    {'field': 'recorded_conservation_data',
     'name': 'recorded conservation data',
     'text': 'A brief description of the conservation treatment applied if any with literature references (Names of authors, year)'},
    {'field': 'sample_description',
     'name': 'description of sample',
     'text': 'Information on the sample, the way it was obtained, its condition (presence or not of corrosion layers) and dimensions'},
    {'field': 'sample_number',
     'name': 'lab number of sample',
     'text': 'The inventory number of the artefact sample'},
    {'field': 'date_aim_sampling',
     'name': 'date and aim of sampling',
     'text': 'The date and aim of sampling'},
    {'field': 'validated', 'name': 'validated', 'text': ''},
    {'field': 'published', 'name': 'published', 'text': ''},
    {'field': 'object',
     'name': 'object described',
     'text': 'Name of the artefact'},
    {'field': 'metal1',
     'name': '1st metal element',
     'text': 'The primary metal element of the artefact'},
    {'field': 'alloy',
     'name': 'alloy',
     'text': 'The alloy the artefact is made of'},
    {'field': 'type',
     'name': 'type of artefact',
     'text': 'The name of the artefact, its typology'},
    {'field': 'origin',
     'name': 'origin',
     'text': 'The place, city and country where the artefact comes from or the object to which the section considered belongs to'},
    {'field': 'recovering_date',
     'name': 'date of recovering',
     'text': 'The date of excavation for archaeological objects, of production and use for other artefacts'},
    {'field': 'chronology_period',
     'name': 'dating of artefact (Tpq _ Taq)',
     'text': 'The dating of the artefact'},
    {'field': 'environment',
     'name': 'burial conditions / environment',
     'text': 'The environment where the artefact was found'},
    {'field': 'location',
     'name': 'artefact location',
     'text': 'The actual location of the artefact'},
    {'field': 'owner', 'name': 'owner', 'text': 'The owner of the artefact'},
    {'field': 'technology',
     'name': 'technology',
     'text': 'The manufacturing techniques used to produce the artefact'},
    {'field': 'sample_location',
     'name': 'sample location',
     'text': 'The actual location of the artefact sample'},
    {'field': 'responsible_institution',
     'name': 'responsible institution',
     'text': 'The responsible institution for the artefact sample'},
    {'field': 'microstructure',
     'name': 'microstructure',
     'text': 'Microstructure of the metal'},
    {'field': 'corrosion_form',
     'name': 'corrosion form',
     'text': 'Based on observation'},
    {'field': 'corrosion_type',
     'name': 'corrosion type',
     'text': 'Based on literature'},
    {'field': 'parent',
     'name': 'parent',
     'text': 'The card from which this card is the child'}]


def add_artefactform_descriptions(apps, schema_editor):
    ArtefactFormDescription = apps.get_model('artefacts', 'ArtefactFormDescription')
    for rec in ARTEFACT_FIELDS_METADATA:
        ArtefactFormDescription.objects.update_or_create(form='ArtefactForm', field=rec.pop('field'), defaults=rec)


def remove_artefactform_descriptions(apps, schema_editor):
    ArtefactFormDescription = apps.get_model('artefacts', 'ArtefactFormDescription')
    ArtefactFormDescription.objects.filter(form='ArtefactForm',
                                           field__in=[r['field'] for r in ARTEFACT_FIELDS_METADATA]).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('artefacts', '0033_artefactformdescription_formdescription'),
    ]

    operations = [
        migrations.RunPython(add_artefactform_descriptions, remove_artefactform_descriptions)
    ]
