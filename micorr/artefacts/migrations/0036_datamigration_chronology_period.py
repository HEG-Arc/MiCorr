# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-03-26 13:41


from collections import OrderedDict

from django.db import migrations

CHRONOLOGY_CATEGORY_TPQ_TAQ = OrderedDict((
    ('Bronze Age', {'tpq': -3300, 'taq': -1200}),
    ('Early Bronze Age', {'tpq': -3300, 'taq': -2100}),
    ('Middle Bronze Age', {'tpq': -2100, 'taq': -1550}),
    ('Late Bronze Age', {'tpq': -1550, 'taq': -1200}),
    ('Iron Age', {'tpq': -1200, 'taq': -550}),
    ('Roman Times', {'tpq': -1200, 'taq': 453}),
    ('Medieval times', {'tpq': 500, 'taq': 1500}),
    ('Early medieval times', {'tpq': 500, 'taq': 1000}),
    ('High medieval times', {'tpq': 1000, 'taq': 1250}),
    ('Late medieval times', {'tpq': 1250, 'taq': 1500}),
    ('Modern Times', {'tpq': 1500, 'taq': 1800}),
    ('First World War', {'tpq': 1914, 'taq': 1918}),
    ('Questionable', {'tpq': 0, 'taq': 0})))

CHRONOLOGY_PERIOD_TPQ_TAQ = {'14th Century BC, Bronze Age D': {'tpq': -140, 'taq': -1300},
                             '1550BC _ 1350BC': {'tpq': -1550, 'taq': -1350},
                             '16th century AD': {'tpq': 1501, 'taq': 1600},
                             '1720 AD': {'tpq': 1720, 'taq': 0},
                             '1780': {'tpq': 1780, 'taq': 0},
                             '17th Century AD': {'tpq': 1601, 'taq': 1700},
                             '1860 _ 1896': {'tpq': 1860, 'taq': 1896},
                             '1900 AD/20th century': {'tpq': 1900, 'taq': 2000},
                             '1902 _ 1904': {'tpq': 1902, 'taq': 1904},
                             '1909 _ 1910': {'tpq': 1909, 'taq': 1910},
                             '1915': {'tpq': 1915, 'taq': 0},
                             '1918': {'tpq': 1918, 'taq': 0},
                             '1970 _ 1974': {'tpq': 1970, 'taq': 1974},
                             '19th - 20th century': {'tpq': 1801, 'taq': 2000},
                             '1st century AD': {'tpq': 1, 'taq': 100},
                             '20 BC _ 50 AC': {'tpq': -20, 'taq': 50},
                             '20th century (1986 _ 1990)': {'tpq': 1986, 'taq': 1990},
                             '2nd half 1st century AD.': {'tpq': 50, 'taq': 100},
                             '550 _ 650 AD': {'tpq': 550, 'taq': 650},
                             '550 _ 750 AD': {'tpq': 550, 'taq': 750},
                             '5th Century BC': {'tpq': -500, 'taq': -401},
                             'August style: First century after Christ': {'tpq': 1, 'taq': 100},
                             'Augustus style: 1th century A.D.': {'tpq': 1, 'taq': 100},
                             'Augustus style: 1th century AD': {'tpq': 1, 'taq': 100},
                             'Augustus style: First century after Christ': {'tpq': 1,
                                                                             'taq': 100},
                             'Before 1500 A.D (if original), 20th century (if replica)': {'tpq': 0,
                                                                                           'taq': 1500},
                             'Between 1000 and 650 years BC (if original) or 20th century (if fake)': {'tpq': -1000,
                                                                                                        'taq': -650},
                             'Between 200 at 1300 AD': {'tpq': 200, 'taq': 1300},
                             'Bronze Age': {'tpq': -3300, 'taq': -600},
                             'Hallstatt A/B (1050BC _ 800BC)': {'tpq': -1050,
                                                                 'taq': -800},
                             'Hallstatt A2/B (1050BC _ 800BC)': {'tpq': -1050,
                                                                  'taq': -800},
                             'Hallstatt B1 (1054/1037BC _ 1000BC)': {'tpq': -1054,
                                                                      'taq': -1000},
                             'Hallstatt B2/3 (1000BC _ not defined)': {'tpq': -1000,
                                                                        'taq': 0},
                             'La T\xe8ne C, 250 _ 140 BC': {'tpq': -250, 'taq': -140},
                             'La T\xe8ne D (140BC _ 30BC)': {'tpq': -140, 'taq': -30},
                             'Probably from the latest period of Ancient Egypt.': {'tpq': -664,
                                                                                    'taq': -332},
                             'Roman Times': {'tpq': -753, 'taq': 476},
                             'Second half of the 2nd Century AD (150 _ 200 AD)': {'tpq': 150, 'taq': 200},
                             'TPQ: unknown, TAQ: 1500': {'tpq': 0, 'taq': 1500},
                             'Tpq (earliest): unknown, Taq (latest): 1500': {'tpq': 0, 'taq': 1500},
                             'Unknown': {'tpq': 0, 'taq': 0},
                             'before 1500': {'tpq': 0, 'taq': 1500},
                             'mideval times': {'tpq': 500, 'taq': 1500}}


def convert_chronology_periods(apps, schema_editor):
    ChronologyPeriod = apps.get_model('artefacts', 'ChronologyPeriod')
    ChronologyCategory = apps.get_model('artefacts', 'ChronologyCategory')

    # update existing categories
    for cc in ChronologyCategory.objects.all():
        if cc.name in CHRONOLOGY_CATEGORY_TPQ_TAQ:
            cc.tpq = CHRONOLOGY_CATEGORY_TPQ_TAQ[cc.name]['tpq']
            cc.taq = CHRONOLOGY_CATEGORY_TPQ_TAQ[cc.name]['taq']
            cc.order = list(CHRONOLOGY_CATEGORY_TPQ_TAQ.keys()).index(cc.name)
            cc.save()

    # add missing categories
    for name in list(CHRONOLOGY_CATEGORY_TPQ_TAQ.keys()):
        if not ChronologyCategory.objects.filter(name=name).exists():
            new_cc = ChronologyCategory.objects.create(name=name, order=list(CHRONOLOGY_CATEGORY_TPQ_TAQ.keys()).index(name),
                                                       **CHRONOLOGY_CATEGORY_TPQ_TAQ[name])
            print(('\nadded {} : {} => ChronologyCategory({}) '.format(name, CHRONOLOGY_CATEGORY_TPQ_TAQ[name], new_cc.id)))

    for cp in ChronologyPeriod.objects.all():
        print(('converting {} -> {} artefact(s)'.format(cp.name, cp.artefact_set.count())))
        for a in cp.artefact_set.all():
            if cp.name in CHRONOLOGY_PERIOD_TPQ_TAQ:
                a.chronology_tpq = CHRONOLOGY_PERIOD_TPQ_TAQ[cp.name]['tpq']
                a.chronology_taq = CHRONOLOGY_PERIOD_TPQ_TAQ[cp.name]['taq']
            else:
                print(('\nChronologyPeriod({}) : "{}" missing in CHRONOLOGY_PERIOD_TPQ_TAQ\n'.format(cp.id, cp.name)))
            a.chronology_category = cp.chronology_category
            a.chronology_comment = cp.name
            a.save()

def nop_reverse_migration(apps, schema_editor):
    pass



class Migration(migrations.Migration):
    dependencies = [
        ('artefacts', '0035_add_chronology_fields'),
    ]

    operations = [
        migrations.RunPython(convert_chronology_periods, nop_reverse_migration)
    ]
