# Generated by Django 3.0.14 on 2021-11-17 21:59

from django.db import migrations


# Historical models does not carry non ORM features
# so we have to redefine the SectionCategory enum constants here
class SC:
    ARTEFACT = 'AR'
    DESCRIPTION = 'DE'
    SAMPLE = 'SA'
    ANALYSIS_AND_RESULTS = 'AN'
    SYNTHESIS = 'SY'
    CONCLUSION = 'CO'
    REFERENCES = 'RE'


def nop_reverse_migration(apps, schema_editor):
    pass

"""
implements the following structure for p1 with section templates:
moves existing stratigraphies to sections of order 23 and 44

10 The object
20 Description and visual observation
    21 Study area(s)
    22 Binocular observation and representation of the corrosion structure
    23 MiCorr stratigraphy(ies) – Bi
30 Sample(s)
40 Analyses and results
    41 Non invasive analysis
    42 Metal sample
    43 Corrosion layer(s)
    44 MiCorr stratigraphy(ies) – CS
50 Synthesis of the binocular / cross-section examination of the corrosion structure
60 Conclusion
70 References
"""
def add_p1_templates_and_sections(apps, schema_editor):
    SectionTemplate = apps.get_model('artefacts', 'SectionTemplate')
    SectionCategory = apps.get_model('artefacts', 'SectionCategory')
    Section = apps.get_model('artefacts', 'Section')

    reorder_sections = [
        dict(section_category=SC.ARTEFACT, order=1, new_order=10),
        dict(section_category=SC.DESCRIPTION, order=2, new_order=20),
        dict(section_category=SC.DESCRIPTION, order=3, new_order=21),
        dict(section_category=SC.DESCRIPTION, order=4, new_order=22),
        dict(section_category=SC.SAMPLE, order=5, new_order=30),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, order=6, new_order=40),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, order=7, new_order=42),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, order=8, new_order=43),
        dict(section_category=SC.SYNTHESIS, order=9, new_order=50),
        dict(section_category=SC.CONCLUSION, order=10, new_order=60),
        dict(section_category=SC.REFERENCES, order=11, new_order=70),
    ]

    for s in reversed(reorder_sections):
        new_order = s.pop('new_order')
        # inplace change section category name by instance
        s['section_category'] = SectionCategory.objects.get(page_template=1, name=s.pop('section_category'))
        section_template = SectionTemplate.objects.get(**s, page_template=1)
        section_template.order=new_order
        section_template.save()
        print(f'{section_template} updated order:{s["order"]} => {new_order}')

    insert_sections = [
        # move stratigraphy from 22 (Binocular observation) into 23, disable stratigraphy in 23
        dict(section_category=SC.DESCRIPTION, order=23, title='MiCorr stratigraphy(ies) – Bi',
             has_content=True, has_images=True, has_stratigraphies=True, move_strat_from=22),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, order=41, title='Non invasive analysis',
             has_content=True, has_images=True, has_stratigraphies=False),
        # move stratigraphy from 30 into 44 disable samples stratigraphy
        dict(section_category=SC.ANALYSIS_AND_RESULTS, order=44, title='MiCorr stratigraphy(ies) – CS',
             has_content=True, has_images=True, has_stratigraphies=True, move_strat_from=30),
    ]

    current_sc_name = None
    for s in insert_sections:
        if current_sc_name != s['section_category']:
            current_sc_name = s['section_category']
            current_section_category = SectionCategory.objects.get(page_template=1, name=current_sc_name)
        s.pop('section_category')
        move_strat_from = s.pop('move_strat_from', None)
        section_template, created = SectionTemplate.objects.update_or_create(page_template=1,
                                                                             section_category=current_section_category,
                                                                             order=s.pop('order'),
                                                                             defaults=s)
        print(f'{section_template} created({created} order:{section_template.order}')

        from_section_template = SectionTemplate.objects.get(page_template=1, order=move_strat_from or 10)


        print(f'creating {from_section_template.section_set.count()} new sections for {section_template} from {from_section_template}')
        for from_section in from_section_template.section_set.all():
            # create a new section for each existing source section
            new_section = Section.objects.create(template=section_template, artefact=from_section.artefact)
            stratigraphy_count = from_section.stratigraphy_set.count()
            # move stratigraphies if required
            if move_strat_from and stratigraphy_count:
                print(f'moving {stratigraphy_count} stratigraphies from {from_section} to {new_section}')
                for stratigraphy in from_section.stratigraphy_set.all():
                    stratigraphy.section = new_section
                    stratigraphy.save()

        # disable stratigraphies in the old section template
        if move_strat_from and from_section_template.has_stratigraphies:
            print(f'{from_section_template} has_stratigraphies: True => False')
            from_section_template.has_stratigraphies = False
            from_section_template.save()


class Migration(migrations.Migration):
    dependencies = [
        ('artefacts', '0049_datamigration_update_page_templates'),
    ]

    operations = [
        migrations.RunPython(add_p1_templates_and_sections, nop_reverse_migration)
    ]
