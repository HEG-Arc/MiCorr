# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-06-18 20:42
from __future__ import unicode_literals

from django.db import migrations


# Historical models does not carry non ORM features
# so we have to redefine the SectionCategory enum constants here
class SC:
    ARTEFACT = 'AR'
    DESCRIPTION = 'DE'
    SAMPLE = 'SA'
    ANALYSIS_AND_RESULTS = 'AN'
    SYNTHESIS = 'SY'
    CONCLUSION = 'CO'
    REFERENCES = 'RE'


def nop_reverse_migration(apps, schema_editor):
    pass


def add_missing_section_category(apps, schema_editor):
    """
    Adds Description and Synthesis sections categories
    :param apps:
    :param schema_editor:
    :return:
    """
    SectionCategory = apps.get_model('artefacts', 'SectionCategory')
    category_list = [SC.ARTEFACT,
                     SC.DESCRIPTION,  # new value with order 2
                     SC.SAMPLE,
                     SC.ANALYSIS_AND_RESULTS,
                     SC.SYNTHESIS,  # new value with order 5
                     SC.CONCLUSION,
                     SC.REFERENCES]
    for i, sc in enumerate(reversed(category_list)):
        SectionCategory.objects.update_or_create(page_template=1, name=sc, defaults=dict(order=7 - i))


def create_p1_section_templates(apps, schema_editor):
    SectionTemplate = apps.get_model('artefacts', 'SectionTemplate')
    SectionCategory = apps.get_model('artefacts', 'SectionCategory')

    sections = [
        dict(section_category=SC.ARTEFACT, title='The object',
             fieldset='artefact',
             has_images=True,
             images_help_text='''<p><i>General picture of the object should contain a scale and a chart colour. The caption gives the
              name of the artefact, the type of alloy and any relevant information</i></p>'''),

        dict(section_category=SC.DESCRIPTION, title='Description and visual observation',
             fieldset='description',
             has_complementary_information=True,
             complementary_information_help_text='<p><i>Any important information that does not fit to the previous fields</i></p>'),
        dict(section_category=SC.DESCRIPTION,
             title='Zones of the artefact submitted to visual observation and location of sampling areas',
             has_images=True, images_help_text='''
                                    <p><i>Picture of the object / element with arrows indicating the location of the
                                    sampling area. Pictures with details can be provided. Caption should be more or less
                                    the same as: Location of sampling area and sample selected</i></p>'''),
        dict(section_category=SC.DESCRIPTION, title='Macroscopic observation',
             has_content=True, has_images=True, has_stratigraphies=True,
             content_help_text='<p><i>Except if specific, copy / paste the following text : The schematic representation below gives an overview of the corrosion layers encountered on the object from a first visual macroscopic observation</i></p>',
             images_help_text='''<p><i>
                                    Stratigraphic representation of the object in cross-section by macroscopic
                                    observation. The schematic drawing should indicate the whole stratigraphy of layers
                                    using the encoded strata system developed within Bertholon schematic description of
                                    metal corrosion</i></p>''',
             stratigraphies_help_text='<p><i>Stratigraphic representation(s) of the object in cross-section using the MiCorr application</i></p>'),

        dict(section_category=SC.SAMPLE, title='Sample', fieldset='sample',
             has_complementary_information=True, has_images=True, has_stratigraphies=True,
             images_help_text='''<p><i>General picture of the unetched cross-section of an element / object in dark field with a scale and indication of other figures found below in the file. The caption should be more or less the same as: Micrograph of the cross-section showing the location of Fig.... Unetched, dark field, x (indication of the magnification). The next figure should be the MiCorr stratigraphy built using the MiCorr application</i></p>''',
             complementary_information_help_text='<p><i>Any important information that does not fit to the previous fields</i></p>'),

        dict(section_category=SC.ANALYSIS_AND_RESULTS, title='Analyses and results',
             has_content=True,
             content_help_text='<p><i>Add the list of the techniques used : Metallography (etched with ? reagent), SEM-EDS, FTIR, Raman spectroscopy. If the conditions of the analyses are specific (check with the information provided under the “Scientific bases” tab), please add them in your text</i></p>'),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, title='Metal', fieldset='metal',
             has_content=True, has_images=True, has_complementary_information=True,
             content_help_text='''<p><i>A description of the metal: its composition, texture (porosity), hardness,
                                    microstructure revealed by etching and specific features</i></p>''',
             complementary_information_help_text='<p><i>Any important information that does not fit to the previous fields</i></p>'),
        dict(section_category=SC.ANALYSIS_AND_RESULTS, title='Corrosion layers', fieldset='corrosion',
             has_content=True, has_images=True, has_complementary_information=True,
             content_help_text='''<p><i>A description of the corrosion layers: their composition, texture
                                    (porosity), microstructure if any and specific features. The corrosion form(s) and corrosion type
                                    should be deduced</i></p>''',
             complementary_information_help_text='<p><i>Any important information that does not fit to the previous fields</i></p>'),

        dict(section_category=SC.SYNTHESIS,
             title='Synthesis of the macroscopic / microscopic observation of corrosion layers',
             has_content=True, has_images=True,
             content_help_text='<p><i>The schematic representation of corrosion layers integrating additional information based on the analyses carried out</i></p>'),

        dict(section_category=SC.CONCLUSION, title='Conclusion',
             has_content=True,
             content_help_text='''<p><i>A brief summary of all data collected: metal with composition and microstructure.
                        Corrosion forms and type as well as description of the corrosion layers. Location of the
                        limit of the original surface if any</i></p>'''),

        dict(section_category=SC.REFERENCES, title='References',
             has_content=True),
    ]
    current_sc_name = None
    for i, s in enumerate(sections):
        if current_sc_name != s['section_category']:
            current_sc_name = s['section_category']
            current_section_category = SectionCategory.objects.get(page_template=1, name=current_sc_name)
        # removes section_category item from section' dict as it's the constant not the Object
        # which is actually current_section_category
        s.pop('section_category')
        s.update(page_template=1, order=1 + i, section_category=current_section_category)
        SectionTemplate.objects.create(**s)


def delete_p1_section_templates(apps, schema_editor):
    SectionTemplate = apps.get_model('artefacts', 'SectionTemplate')

    SectionTemplate.objects.filter(page_template=1).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('artefacts', '0028_add_section_template'),
    ]

    operations = [
        migrations.RunPython(add_missing_section_category, nop_reverse_migration),
        migrations.RunPython(create_p1_section_templates, delete_p1_section_templates)
    ]
